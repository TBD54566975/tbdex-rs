namespace tbdex {
  void hello_world();
};

interface RustCoreError {
  string error_type();
  string variant();
  string message();
};

enum ResourceKind {
  "Offering",
  "Balance"
};

[Trait]
interface Resource {
  [Throws=RustCoreError]
  void sign(BearerDid bearer_did);
  [Throws=RustCoreError]
  void verify();
};

dictionary ResourceMetadataData {
  ResourceKind kind;
  string from;
  string to;
  string id;
  string protocol;
  string created_at;
  string? updated_at;
};

interface Offering {
  constructor(string from, OfferingDataData data, string protocol);
  OfferingData get_data();
  [Throws=RustCoreError]
  void sign(BearerDid bearer_did);
  [Throws=RustCoreError]
  void verify();
};

dictionary OfferingData {
  ResourceMetadataData metadata;
  OfferingDataData data;
  string signature;
};

dictionary OfferingDataData {
  string description;
  string payout_units_per_payin_unit;
  PayinDetailsData payin;
  PayoutDetailsData payout;
  PresentationDefinitionData required_claims;
};

dictionary PayinDetailsData {
  string currency_code;
  string? min;
  string? max;
  sequence<PayinMethodData> methods;
};

dictionary PayinMethodData {
  string kind;
  string? name;
  string? description;
  string? group;
  string? required_payment_details;
  string? fee;
  string? min;
  string? max;
};

dictionary PayoutDetailsData {
  string currency_code;
  string? min;
  string? max;
  sequence<PayoutMethodData> methods;
};

dictionary PayoutMethodData {
  string kind;
  string? name;
  string? description;
  string? group;
  string? required_payment_details;
  string? fee;
  string? min;
  string? max;
  i64 estimated_settlement_time;
};

dictionary BalanceData {
  ResourceMetadataData metadata;
  BalanceDataData data;
  string signature;
};

dictionary BalanceDataData {
  string currency_code;
  string available;
};

interface Balance {
  constructor(string from, BalanceDataData data, string protocol);
  BalanceData get_data();
  [Throws=RustCoreError]
  void sign(BearerDid bearer_did);
  [Throws=RustCoreError]
  void verify();
};

enum MessageKind {
  "Rfq",
  "Quote",
  "Order",
  "OrderStatus",
  "Close"
};

[Trait]
interface Message {
  [Throws=RustCoreError]
  void sign(BearerDid bearer_did);
  [Throws=RustCoreError]
  void verify();
};

dictionary MessageMetadataData {
  string from;
  string to;
  MessageKind kind;
  string id;
  string exchange_id;
  string? external_id;
  string protocol;
  string created_at;
};

interface Rfq {
  constructor(string to, string from, CreateRfqDataData create_rfq_data, string protocol, string? external_id);
  RfqData get_data();
  [Throws=RustCoreError]
  void sign(BearerDid bearer_did);
  [Throws=RustCoreError]
  void verify();

  [Throws=RustCoreError]
  boolean verify_offering_requirements(Offering offering);
  [Throws=RustCoreError]
  boolean verify_all_private_data();
  [Throws=RustCoreError]
  boolean verify_present_private_data();
};

dictionary RfqData {
  MessageMetadataData metadata;
  RfqDataData data;
  RfqPrivateDataData private_data;
  string signature;
};

dictionary CreateRfqDataData {
  string offering_id;
  CreateSelectedPayinMethodData payin;
  CreateSelectedPayoutMethodData payout;
  sequence<string> claims; 
};

dictionary CreateSelectedPayinMethodData {
  string kind;
  string payment_details;
  string amount;
};

dictionary CreateSelectedPayoutMethodData {
  string kind;
  string payment_details;
};

dictionary RfqDataData {
  string offering_id;
  SelectedPayinMethodData payin;
  SelectedPayoutMethodData payout;
  string? claims_hash;
};

dictionary SelectedPayinMethodData {
  string kind;
  string? payment_details_hash;
  string amount;
};

dictionary SelectedPayoutMethodData {
  string kind;
  string? payment_details_hash;
};

dictionary RfqPrivateDataData {
  string salt;
  PrivatePaymentDetailsData? payin;
  PrivatePaymentDetailsData? payout;
  sequence<string>? claims;
};

dictionary PrivatePaymentDetailsData {
  string payment_details;
};




















dictionary JwkData {
  string alg;
  string kty;
  string crv;
  string? d;
  string x;
  string? y;
};

dictionary DidData {
  string uri;
  string url;
  string method;
  string id;
  record<string, string>? params;
  string? path;
  string? query;
  string? fragment;
};

dictionary DocumentData {
  string id;
  sequence<string>? context;
  sequence<string>? controller;
  sequence<string>? also_known_as;
  sequence<VerificationMethodData> verification_method;
  sequence<string>? authentication;
  sequence<string>? assertion_method;
  sequence<string>? key_agreement;
  sequence<string>? capability_invocation;
  sequence<string>? capability_delegation;
  sequence<ServiceData>? service;
};

dictionary VerificationMethodData {
  string id;
  string type;
  string controller;
  JwkData public_key_jwk;
};

dictionary ServiceData {
  string id;
  string type;
  sequence<string> service_endpoint;
};

interface Web5RustCoreError {
  string error_type();
  string variant();
  string message();
};

[Trait]
interface Signer {
  [Throws=Web5RustCoreError]
  bytes sign([ByRef] sequence<u8> payload);
};

[Trait]
interface KeyManager {
  [Throws=Web5RustCoreError]
  Signer get_signer(JwkData public_jwk);
};

dictionary BearerDidData {
  DidData did;
  DocumentData document;
  KeyManager key_manager;
};

interface BearerDid {
  [Throws=Web5RustCoreError]
  constructor([ByRef] string uri, KeyManager key_manager);
  BearerDidData get_data();
  [Throws=Web5RustCoreError]
  Signer get_signer(string key_id);
};






dictionary PresentationDefinitionData {
  string id;
  string? name;
  string? purpose;
  sequence<InputDescriptorData> input_descriptors;
};

dictionary InputDescriptorData {
  string id;
  string? name;
  string? purpose;
  ConstraintsData constraints;
};

dictionary ConstraintsData {
  sequence<FieldData> fields;
};

enum Optionality {
  "Required",
  "Preferred",
};

dictionary FieldData {
  string? id;
  string? name;
  sequence<string> path;
  string? purpose;
  FilterData? filter;
  boolean? optional;
  Optionality? predicate;
};

dictionary FilterData {
  string? type;
  string? pattern;
  string? const_value;
};

interface PresentationDefinition {
  constructor(PresentationDefinitionData data);
  [Throws=Web5RustCoreError]
  sequence<string> select_credentials([ByRef] sequence<string> vc_jwts);
};